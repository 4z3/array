#! /bin/sh

##
# Definitions:
# - An array is a newline separated list of array elements.
# - An array element is an `array_element_encode`d string.

##
# Array constructor
#
# Turn arguments into an array.
array () {
  for i; do
    echo "$i" | array_element_encode
  done
}

##
# Get length of array
#
# Pipe your array in:
#   echo "$ary" | array_len
array_len () {
  wc -l
}

##
# Element accessor
#
# Uses first argument as (zero-based) index.
#
# Exit status:
#    0  Success.
#   >0  An error occurred.
#
# Pipe your array in:
#   echo "$ary" | array_nth $index
array_nth () {
  printf '%d' "$1" >/dev/null 2>&1 \
    && awk -v i=$1 '
        BEGIN { code=1 }
        NR == i + 1 { print $0; code=0 }
        END { exit code }
      ' \
    | array_element_decode
}

##
# Get the first index of an element
#
# Exit status:
#   0  Success.
#  >1  Element not found
#
# Pipe your array in:
#   echo "$ary" | array_indexof $element
array_indexof() {
  i=$((-1 + $(sed -n "/^$(echo "$1" | array_element_encode | sed -e 's/[]\/$*.^|[]/\\&/g')$/=" | head -n 1 | grep .)))
  echo $i
}

##
# Turn stdin into an array element.
#
# This is similar to urlencode but only for % and \n (and not \0).
#
array_element_encode() {
  sed '
    s/%/%25/g
  ' |
  sed '
    :a; $!N; s/\n/%0A/; ta
  '
}

##
# Inverse function of array_element_encode.
#
array_element_decode() {
  sed '
    s/%0A/\n/gi
    s/%25/%/gi
  '
}
